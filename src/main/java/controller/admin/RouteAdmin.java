package controller.admin;

import DAO.Admin.RouteDAO;
import DAO.Admin.RouteDAO.AirportOption;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import model.Route;

@WebServlet(name = "RouteAdmin", urlPatterns = {"/RouteAdmin"})
public class RouteAdmin extends HttpServlet {

    private RouteDAO dao;

    @Override
    public void init() throws ServletException {
        dao = new RouteDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // N·∫øu UI c·ªßa b·∫°n v·∫´n c√≤n link GET ƒë·ªÉ xo√°, m·ªü comment d∆∞·ªõi (nh∆∞ng l∆∞u √Ω r·ªßi ro CSRF)
        String action = request.getParameter("action");
        if (action == null) action = "listRoutes";

        try {
            switch (action) {
                case "showAddForm":
                    showAddForm(request, response);
                    break;

                case "editRoute":
                    editRouteForm(request, response);
                    break;

                // ‚ö†Ô∏è Tu·ª≥ ch·ªçn: cho ph√©p GET xo√° (kh√¥ng khuy·∫øn ngh·ªã n·∫øu kh√¥ng c√≥ CSRF token)
                // case "deleteRoute":
                //     deleteRoute(request, response);
                //     break;

                case "listRoutes":
                default:
                    listRoutes(request, response);
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
            listRoutes(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        String action = request.getParameter("action");
        if (action == null) action = "listRoutes";

        try {
            switch (action) {
                case "addRoute":
                    addRoute(request, response);
                    break;

                case "updateRoute":
                    updateRoute(request, response);
                    break;

                case "deleteRoute":
                    deleteRoute(request, response);
                    break;

                case "showAddForm":
                    showAddForm(request, response);
                    break;

                case "editRoute":
                    editRouteForm(request, response);
                    break;

                case "listRoutes":
                default:
                    listRoutes(request, response);
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
            listRoutes(request, response);
        }
    }

    /* ================== Actions ================== */

    private void listRoutes(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<Route> routes = dao.getAllRoutes();
        request.setAttribute("routes", routes);
        request.getRequestDispatcher("/WEB-INF/admin/manageRoutes.jsp").forward(request, response);
    }

    private void showAddForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<AirportOption> airports = dao.getAirportOptions();
        request.setAttribute("airports", airports);
        request.getRequestDispatcher("/WEB-INF/admin/addRoute.jsp").forward(request, response);
    }

    private void editRouteForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        Route r = dao.getRouteById(id);
        if (r == null) {
            request.setAttribute("error", "Kh√¥ng t√¨m th·∫•y tuy·∫øn bay.");
            listRoutes(request, response);
            return;
        }
        List<AirportOption> airports = dao.getAirportOptions();
        request.setAttribute("route", r);
        request.setAttribute("airports", airports);
        request.getRequestDispatcher("/WEB-INF/admin/editRoute.jsp").forward(request, response);
    }

    private void addRoute(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String originIata  = trimParam(request.getParameter("originIata"));
        String destIata    = trimParam(request.getParameter("destIata"));
        Integer distanceKm = parseInteger(request.getParameter("distanceKm"));
        Integer duration   = parseInteger(request.getParameter("durationMinutes"));
        boolean active     = request.getParameter("active") != null;

        try {
            if (originIata == null || destIata == null) {
                request.setAttribute("error", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒëi·ªÉm ƒëi/ƒëi·ªÉm ƒë·∫øn.");
            } else if (originIata.equalsIgnoreCase(destIata)) {
                request.setAttribute("error", "ƒêi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn ph·∫£i kh√°c nhau.");
            } else if (dao.existsRoute(originIata, destIata)) {
                request.setAttribute("error", "‚ùå Tuy·∫øn bay t·ª´ " + originIata + " ƒë·∫øn " + destIata + " ƒë√£ t·ªìn t·∫°i!");
            } else {
                dao.insertRoute(originIata, destIata, distanceKm, duration, active);
                request.setAttribute("msg", "‚úÖ Th√™m tuy·∫øn bay th√†nh c√¥ng!");
            }
        } catch (SQLException ex) {
            request.setAttribute("error", "‚ùå Kh√¥ng th·ªÉ th√™m tuy·∫øn bay: " + ex.getMessage());
        }
        listRoutes(request, response);
    }

    private void updateRoute(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int id            = Integer.parseInt(request.getParameter("id"));
        String originIata = trimParam(request.getParameter("originIata"));
        String destIata   = trimParam(request.getParameter("destIata"));
        Integer distanceKm = parseInteger(request.getParameter("distanceKm"));
        Integer duration   = parseInteger(request.getParameter("durationMinutes"));
        boolean active     = request.getParameter("active") != null;

        try {
            if (originIata == null || destIata == null) {
                request.setAttribute("error", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒëi·ªÉm ƒëi/ƒëi·ªÉm ƒë·∫øn.");
            } else if (originIata.equalsIgnoreCase(destIata)) {
                request.setAttribute("error", "ƒêi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn ph·∫£i kh√°c nhau.");
            } else if (dao.existsRouteForUpdate(id, originIata, destIata)) {
                request.setAttribute("error", "‚ùå Tuy·∫øn bay t·ª´ " + originIata + " ƒë·∫øn " + destIata + " ƒë√£ t·ªìn t·∫°i!");
            } else {
                dao.updateRoute(id, originIata, destIata, distanceKm, duration, active);
                request.setAttribute("msg", "‚úÖ C·∫≠p nh·∫≠t tuy·∫øn bay th√†nh c√¥ng!");
            }
        } catch (SQLException ex) {
            request.setAttribute("error", "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: " + ex.getMessage());
        }
        listRoutes(request, response);
    }

    private void deleteRoute(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        boolean ok = dao.deleteRoute(id);
        if (ok) {
            request.setAttribute("msg", "üóëÔ∏è ƒê√£ xo√° tuy·∫øn bay.");
        } else {
            request.setAttribute("error",
                "‚ùå Kh√¥ng th·ªÉ xo√° tuy·∫øn bay. C√≥ th·ªÉ tuy·∫øn bay ƒëang ƒë∆∞·ª£c tham chi·∫øu (v√≠ d·ª•: Flight) ho·∫∑c ƒë√£ b·ªã xo√° tr∆∞·ªõc ƒë√≥.");
        }
        listRoutes(request, response);
    }

    /* ================== Utils ================== */

    private Integer parseInteger(String raw) {
        try {
            if (raw == null || raw.trim().isEmpty()) return null;
            return Integer.parseInt(raw.trim());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private String trimParam(String s) {
        return s == null ? null : s.trim();
    }
}
