package utils;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.OnClose;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;

/**
 * WebSocket cho Live Chat endpoint: ws://localhost:8080/yourApp/chat/{username}
 */
@ServerEndpoint("/chat/{username}")
public class Socketlivechat {

    // L∆∞u danh s√°ch session theo username (guest/user/staff)
    private static final Map<String, Session> clients = new ConcurrentHashMap<>();

    @OnOpen
    public void onOpen(Session session, @PathParam("username") String username) {
        clients.put(username, session);
        System.out.println("K·∫øt n·ªëi m·ªõi: " + username + " - " + session.getId());
        broadcast("üì¢ " + username + " ƒë√£ tham gia ph√≤ng chat!");
    }

    @OnMessage
    public void onMessage(String message, Session session, @PathParam("username") String username) {
        System.out.println("Tin nh·∫Øn t·ª´ " + username + ": " + message);
        // Broadcast cho t·∫•t c·∫£ (c√≥ th·ªÉ tu·ª≥ ch·ªânh ch·ªâ g·ª≠i cho staff/guest c·ª• th·ªÉ)
        broadcast(username + ": " + message);
    }

    @OnClose
    public void onClose(Session session, @PathParam("username") String username) {
        clients.remove(username);
        System.out.println("ƒê√≥ng k·∫øt n·ªëi: " + username + " - " + session.getId());
        broadcast("‚ùå " + username + " ƒë√£ r·ªùi kh·ªèi ph√≤ng chat.");
    }

    // H√†m g·ª≠i tin nh·∫Øn cho t·∫•t c·∫£ client ƒëang online
    private void broadcast(String message) {
        Set<Map.Entry<String, Session>> entries = clients.entrySet();
        for (Map.Entry<String, Session> entry : entries) {
            try {
                entry.getValue().getBasicRemote().sendText(message);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
